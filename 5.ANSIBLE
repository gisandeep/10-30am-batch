DAY-01:

ALL SERVERS:
hostnamectl set-hostname
sudo -i
passwd root
vim /etc/ssh/sshd_config
38: PermitRootLogin yes  # uncomment
63: PasswordAuthentication yes

systemctl restart sshd
systemctl status sshd
===============================================================
ANSIBLE SERVER:

amazon-linux-extras install ansible2 -y
yum install python python-pip python-level -y
vim /etc/ansible/hosts

[dev]
172.31.86.81
172.31.82.63

[test]
172.31.95.156
172.31.83.100

vim /etc/asnible/ansible.cfg (uncomment 14 & 22)

=========================================================
SHH CONNECTIONS: ANSIBLE SERVER

ssh-keygen  --- > 4 ENTERS

ssh-copy-id root@172.31.82.63 --- > yes --- > password
ssh 172.31.82.63
ctrl + d (logout)
Note: If you do not log out and try to connect to the new server it won't connect

Connect all the servers in this way

cd .ssh --- > cat known_hosts

===============================================================
INVENTORY HOST PATTERN:

ansible all --list-hosts    		 # shows all the servers
ansible all[1] --list-hosts		 # shows the 2nd server of all 
ansible dev --list-hosts          # shows the dev server only
ansible test --list-hosts         # shows the test server only
ansible test[1] --list-hosts      # shows the test 2nd server only
ansible all[1:3] --list-hosts     # shows server 2 to server 4
ansible all[-1] --list-hosts      # shows the last server
ansible all[-3] --list-hosts      # shows the last 3rd server

===============================================================
IF YOU ARE WORKING WITH NON ROOT USER USE SUDO

WORKING WITH ANSIBLE:

1. ADHOC: SIMPLE LINUX COMMANDS USED FOR ONLY ONCE WORKS

ansible all -a "ls"
ansible: command line tool
all  : servers 
-a : arguments 
ls : linux commands


ansible all -a "touch file1"
ansible all -a "yum install git -y"


==============================================================================================================================================================
DAY-02: 

MODULES: 
work on key-value pairs.
key-value pair is also called a Dictionary.
Modules are reusable
define -m for module

ansible all -a "yum install git -y"

ansible all -m yum -a "pkg=git state=present"
ansible all -m yum -a "pkg=java-1.8.0-openjdk state=present"
ansible all -m yum -a "name=httpd state=present"
ansible all -m yum -a "name=httpd state=latest"
ansible all -m service -a "name=httpd state=restarted"
ansible all -m user -a "name=venkat state=present
ansible all -m user -a "name=venky"
ansible all -m copy -a "src=app.yml dest=/tmp"



PLAYBOOKS: 
Consist of one or more than one module
to do the work more efficiently
to write the playbook we need to use YAML.
YAML=YET ANOTHER MARKUP LANGUAGE
It is serializable language & Human readable language.
in Yaml the first line starts with --- & end with ...
key-value pair 
indentation is more important.
yml=yaml


PLAYBOOK-1:

- hosts: all
  tasks:
    - name: installing git
      yum: name=git state=present
...

ansible-playbook playbook1.yml

- hosts: all
  tasks:
    - name: abc
      yum: name=git* state=absent
...

======================================================================

PLAYBOOK-2:

---
- hosts: all
  tasks:
    - name: installing java
      yum: name=java-1.8.0-openjdk state=present

    - name: installing tree
      yum: name=tree state=present



- hosts: all
  tasks:
    - name: installing java
      yum: name=java-1.8.0-openjdk state=absent

    - name: installing tree
      yum: name=tree state=absent


==================================================================

- hosts: all
  tasks:
    - name: installing java
      yum: name=java-1.8.0-openjdk state=present

    - name: installing tree
      yum: name=tree state=present

    - name: installing docker
      action: yum name=docker state=present


HISTORY:

61  ansible all --list-hosts
   62  ansible ping -m all
   63  ansible -m ping all
   64  ansible all -a "yum install git -y"
   65  ansible all -a "yum remove git* -y"
   66  ansible all -a "yum install git -y"
   67  ansible all -a "yum remove git* -y"
   68  ansible all -m yum -a "pkg=git state=present"
   69  ansible all -m yum -a "pkg=java-1.8.0-openjdk state=present"
   70  ansible all -a "java -version"
   71  ansible all -m yum -a "name=httpd state=present"
   72  ansible all -m yum -a "name=httpd state=update"
   73  ansible all -m yum -a "name=httpd state=latest"
   74  ansible all -m yum -a "name=httpd state=restart"
   75  ansible all -m service -a "name=httpd state=restart"
   76  ansible all -m service -a "name=httpd state=restarted"
   77  ansible all -m user -a "name=venkat state=present"
   78  ansible all -m user -a "name=vijayyy"
   79  vim app.yml
   80  ll
   81  ansible all -m copy -a "src=app.yml dest=/tmp"
   82  ansible all -a "ls /tmp"
   83  rm -f app.yml 
   84  vim raham.yml
   85  ansible all -a "yum remove git* -y"
   86  history
   87  ansible all -a "cat /etc/passwd"
   88  ansible-playbook raham.yml 
   89  vim raham.yml 
   90  ansible-playbook raham.yml 
   91  vim raham.yml 
   92  ansible-playbook raham.yml 
   93  cat raham.yml 
   94  ll
   95  mv raham.yml playbook1.yml
   96  cat playbook1.yml 
   97  vim raham.yml 
   98  vim playbook1.yml 1
   99  cat playbook1.yml 
  100  ansible-playbook playbook1.yml 
  101  cat playbook1.yml 
  102  vim playbook1.yml 
  103  vim playbook2.yml
  104  ansible-playbook playbook2.yml 
  105  vim playbook2.yml 
  106  ansible-playbook playbook2.yml 
  107  ansible all -a "yum remove maven -y"
  108  cat playbook
  109  cat playbook2.yml 
  110  ansible-playbook playbook2.yml 
  111  vim playbook2.yml 
  112  ansible-playbook playbook2.yml 
  113  ansible all -a "yum remove maven* -y"
  114  ansible all -a "yum remove maven -y"
  115  vim playbook2.yml 
  116  ansible-playbook playbook2.yml 
  117  cat playbook2.yml 
  118  vim playbook2.yml 
  119  ansible-playbook playbook2.yml 
  120  cat playbook2.yml 
  121  vim playbook
  122  cp playbook2.yml playbook3.yml
  123  vim playbook2.yml 
  124  ansible-playbook playbook3.yml 
  125  cat playbook3.yml 
  126  cat playbook2.yml 
  127  ansible-playbook playbook2.yml 
  128  cat playbook2.yml 
  129  vim playbook2.yml 
  130  ansible-playbook playbook2.yml 
  131  cat playbook2.yml 
  
============================================================================

TAGS: to execute a specific task on the playbook with having a number of tasks.


- hosts: all
  tasks:
    - name: installing java
      yum: name=java-1.8.0-openjdk state=present
      tags: a

    - name: installing tree
      yum: name=tree state=present
      tags: b

    - name: installing docker
      action: yum name=docker state=present
      tags: c

SINGLE TAG EXECUTION:
ansible-playbook playbook2.yml --tags c
ansible-playbook playbook2.yml --tags a

MULTI TAG EXECUTION:
ansible-playbook playbook2.yml --tags a,c

SKIPPING TAGS:
ansible-playbook playbook2.yml --skip-tags  "a"
ansible-playbook playbook2.yml --skip-tags  "b"
==================================================================

VARIABLE: Used to assign the value which will vary as per the requirement.
STATIC: Defines inside the playbook.
DYNAMIC: Passing the variable during executing the playbook.

SINGLE STATIC EXAMPLE:
- hosts: all
  vars:
    a: tree
  tasks:
    - name: installing java
      yum: name={{a}} state=present

ansible-playbook playbook2.yml


MULTIPLE STATIC VARIABLE:

- hosts: all
  vars:
    a: tree
    b: docker
  tasks:
    - name: task-1
      yum: name={{a}} state=present

    - name: task-2
      yum: name={{b}} state=present

ansible-playbook playbook2.yml

- hosts: all
  vars:
    a: tree
    b: docker
  tasks:
    - name: task-1
      yum: name={{a}} state=present
      yum: name={{b}} state=present

ansible-playbook playbook2.yml


SINGLE DYNAMIC EXAMPLE:
- hosts: all
  tasks:
    - name: installing java
      yum: name={{a}} state=present

ansible-playbook playbook2.yml --extra-vars "a=maven"

- hosts: all
  tasks:
    - name: task-1
      yum: name={{a}} state=present
      yum: name={{b}} state=present

ansible-playbook playbook2.yml --extra-vars "a=maven, b=tree"

==================================================================

LOOPS: will run until it satisfies the condition.

- hosts: all
  tasks:
    - name: task-1
      yum: name={{item}} state=present
      with_items:
        - git
        - maven
        - docker
        - httpd
        - tree
        - java-1.8.0-openjdk


- hosts: all
  tasks:
    - name: task-1
      user: name={{item}} state=present
      with_items:
        - user1
        - user2
        - user3
        - user4
        - user5
        - user6




HSITORY:

134  cat playbook2
  135  cat playbook2.yml
  136  rm -rf playbook1.yml playbook3.yml
  137  vim playbook2.yml
  138  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  139  cat playbook2.yml
  140  ansible-playbook playbook2.yml --tags b
  141  cat playbook2.yml
  142  ansible-playbook playbook2.yml --tags c
  143  cat playbook2.yml
  144  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  145  cat playbook2.yml
  146  ansible-playbook playbook2.yml --tags a,c
  147  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  148  cat playbook2.yml
  149  ansible-playbook playbook2.yml --skipped-tags  "a"
  150  ansible-playbook playbook2.yml --skip-tags  "a"
  151  ansible-playbook playbook2.yml --skip-tags  "b"
  152  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  153  vim playbook2.yml
  154  cat playbook2.yml
  155  ansible-playbook playbook2.yml
  156  vim playbook2.yml
  157  ansible-playbook playbook2.yml
  158  vim playbook2.yml
  159  cat playbook2.yml
  160  ansible-playbook playbook2.yml --extra-vars "a=maven"
  161  vim playbook2.yml
  162  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  163  cat playbook2.yml
  164  ansible-playbook playbook2.yml
  165  cat playbook2.yml
  166  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  167  vim playbook2.yml
  168  ansible-playbook playbook2.yml
  169  cat playbook2.yml
  170  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  171  vim playbook2.yml
  172  ansible-playbook playbook2.yml --extra-vars "a=maven,b=tree"
  173  cat playbook2.yml
  174  ansible-playbook playbook2.yml --extra-vars "a=maven, b=tree"
  175  ansible all -a "mvn --version"
  176  ansible all -a "tree --version"
  177  vim playbook2.yml
  178  ansible-playbook playbook2.yml
  179  ansible all -a "git -v"
  180  ansible all -a "tree -v"
  181  ansible all -a "tree --version"
  182  ansible all -a "mvn --version"
  183  ansible all -a "docker --version"
  184  ansible all -a "httpd --version"
  185  ansible all -a "java -version"
  186  cat playbook2.yml
  187  vim playbook2.yml
  188  ansible-playbook playbook2.yml
  189  vim playbook2.yml
  190  ansible-playbook playbook2.yml
  191  ansible all -a "cat /etc/passwd"
  192  vim playbook2.yml
  193  ansible-playbook playbook2.yml
  194  ansible all -a "cat /etc/passwd"
  195  history

=====================================================================

DAY-04:

DAY04:

CONDITIONS:

- hosts: all
  tasks:
    - name: INSTALLING TREE ON REDHAT
      command: yum install tree -y
      when: ansible_os_family == "RedHat"
    - name: INSTALLING TREE ON UBUNTU
      command: apt install tree -y
      when: ansible_os_family == "Debian"


- hosts: all
  tasks:
    - name: INSTALLING TREE ON REDHAT
      command: yum install docker -y
      when: ansible_os_family == "RedHat"
    - name: INSTALLING TREE ON UBUNTU
      command: apt install docker -y
      when: ansible_os_family == "Debian"


==================================================================

HANDLERS: one task is linked with another task.
the task will execute when it will be called by another task.
will consist of a notification that indicates we need to start another task.

NOTE: Notify and name will be same if not we will get error.

- hosts: all
  tasks:
    - name: INSTALLING HTTPD
      command: yum install httpd -y

    - name: RESTARTINH HTTPD
      command: systemctl restart httpd


- hosts: all
  tasks:
    - name: INSTALLING HTTPD
      command: yum install httpd -y
      notify: RESTARTING HTTPD
  handlers:
    - name: RESTARTING HTTPD
      command: systemctl restart httpd

- hosts: all
  tasks:
    - name: INSTALLING DOCKER
      command: yum install docker -y
      notify: RESTARTING DOCKER
  handlers:
    - name: RESTARTING DOCKER
      command: systemctl restart docker


==================================================================

VAULT: Used to store the data in encryption format (AES256)

ansible-vault create creds.txt
ansible-vault edit creds.txt
ansible-vault rekey creds.txt
ansible-vault decrypt creds.txt
ansible-vault encrypt creds.txt
ansible-vault view creds.txt

NOTE: ansible-vault will encrypt the playbook as well
so when you encrypt it will ask password and if you want to run the playbook you need to give that password, if not playbook will not be executed.

ansible-vault decrypt playbook2.yml

==================================================================
CONETNT:

- hosts: all
  tasks:
    - name: COPYING THE CONTENT
      copy:
        dest: "abc.txt"
        content: |
          HAI ALL


==================================================================

PYTHON MODULES: Used to manage python libraries on the remote servers.

linux: yum or apt
Python: pip 

- hosts: all
  tasks:
    - name: INSTALLING NumPy
      pip:
        name: NumPy


- hosts: all
  tasks:
    - name: INSTALLING Pandas
      pip:
        name: Pandas

==================================================================

RAW VS COMMAND VS SHELL:

RAW: To execute Linux commands as like commands, shell modules.


- hosts: all
  tasks:
    - name: INSTALLING TREE
      shell: yum install tree -y

    - name: INSTALLING docker
      command: yum install docker -y

    - name: INSTALLING maven
      raw: yum install maven -y

HISTORY:
 196  vim playbook2.yml
  197  ansible setup -m dev[1]
  198  ansible -m setup dev[1]
  199  cat playbook2.yml
  200  ansible -m setup dev[1]
  201  ansible -m setup dev[1] | grep -i family
  202  cat playbook2.yml
  203  ansible-playbook playbook2.yml
  204  vim playbook2.yml
  205  ansible-playbook playbook2.yml
  206  cat playbook2.yml
  207  vim playbook2.yml
  208  ansible-playbook playbook2.yml
  209  vim playbook2.yml
  210  ansible-playbook playbook2.yml
  211  cat playbook2.yml
  212  vim playbook2.yml
  213  ansible-playbook playbook2.yml
  214  vim playbook2.yml
  215  ansible-playbook playbook2.yml
  216  vim playbook2.yml
  217  ansible-playbook playbook2.yml
  218  cat playbook2.yml
  219  vim playbook2.yml
  220  ansible-playbook playbook2.yml
  221  cat playbook2.yml
  222  vim playbook2.yml
  223  ansible-playbook playbook2.yml
  224  cat playbook2.yml
  225  vim playbook2.yml
  226  ansible all -a "yum remove docker* tree* -y"
  227  ansible all -a "yum remove httpd* -y"
  228  ll
  229  vim creds
  230  cat creds
  231  rm -rf creds
  232  ll
  233  ansible-vault create creds.txt
  234  cat creds.txt
  235  ll
  236  ansible-vault edit creds.txt
  237  cat creds.txt
  238  ansible-vault rekey creds.txt
  239  ansible-vault decrypt creds.txt
  240  cat creds.txt
  241  ansible-vault encrypt creds.txt
  242  cat creds.txt
  243  ansible-vault view creds.txt
  244  cat creds.txt
  245  ll
  246  ansible-vault encrypt playbook2.yml
  247  cat playbook2.yml
  248  ansible-playbook playbook2.yml
  249  ansible-vault decrypt playbook2.yml
  250  ansible-playbook playbook2.yml
  251  vim playbook2.yml
  252  ansible-playbook playbook2.yml
  253  ansible all -a "ls"
  254  cat playbook2.yml
  255  ansible all -a "yum install pip -y"
  256  vim playbook2.yml
  257  ansible-playbook playbook2.yml
  258  vim playbook2.yml
  259  ansible-playbook playbook2.yml
  260  vim playbook2.yml
  261  ansible-playbook playbook2.yml
  262  vim playbook2.yml
  263  ansible all -a "yum remove httpd* tree* docker* -y"
  264  ansible-playbook playbook2.yml
  265  cat playbook2.yml
  266  history


=====================================================================================

DAY-05:

ROLES: Managing playbooks into a directory structure.
diving the playbooks.
we can encapsulate the data.



mkdir playbooks
.
├── master.yml
└── roles
    ├── role1
    │   └── tasks
    │       └── main.yml
    ├── role2
    │   └── tasks
    │       └── main.yml
    └── role3
        └── tasks
            └── main.yml

vim roles/role1/tasks/main.yml
vim roles/role2/tasks/main.yml
vim roles/role3/tasks/main.yml

==============================================================================================

ANSIBLE GALAXY: Used to store roles.

I wrote one role -- > upload to ansible-galaxy -- > other people can use it.

if we install a role it will come with the skeleton of the structure.


===================================================================================================
ASYNCHRONOUS ACTIONS & POLLING :

async: time limit
poll: diff

- hosts: all
  tasks:
    - name: INSTALLING TREE
      shell: yum install tree -y

    - name: stopping the task
      command: sleep 20
      async: 30
      poll: 10

    - name: INSTALLING docker
      command: yum install docker -y

- hosts: all
  tasks:
    - name: INSTALLING TREE
      shell: yum install tree -y

    - name: stopping the task
      command: sleep 30
      async: 20
      poll: 10

    - name: INSTALLING docker
      command: yum install docker -y

====================================================================================================
7 servers:
main-1, dev-2, test-2, prod-2

All of them need to be executed on roles

TASK-1: Install java [dev,test]
TASK-2: Install docker with variable on runtime [prod,test]
TASK-3: Create Users (Loops) [all]
TASK-4: Install java using (conditions) [dev-1]
TASK-5: Copy app.yml to all servers
TASK-6: Deploy a basic webpage [dev-1,test-1,prod-1]





history:

  267  ll
  268  rm -rf *
  269  vim playbook.yml
  270  ll
  271  mkdir playbooks
  272  cd playbooks/
  273  ll
  274  vim master.yml
  275  ll
  276  vim master.yml
  277  ll
  278  mkdir roles
  279  mkdir roles/role1
  280  mkdir roles/role2
  281  mkdir roles/role3
  282  yum instal tree -y
  283  yum install tree -y
  284  tree
  285  mkdir roles/role1/tasks
  286  mkdir roles/role2/tasks
  287  mkdir roles/role3/tasks
  288  tree
  289  vim roles/role1/tasks/main.yml
  290  vim roles/role2/tasks/main.yml
  291  vim roles/role3/tasks/main.yml
  292  vim master.yml
  293  ansible-playbook master.yml
  294  vim master.yml
  295  ansible-playbook master.yml
  296  ansible all -a "yum remove docker* -y"
  297  ansible-playbook master.yml
  298  tree
  299  cd
  300  rm -rf *
  301  ll
  302  ansible-galaxy init abc
  303  ll
  304  tree
  305  cat abc/defaults/main.yml
  306  ansible-galaxy search java
  307  ansible-galaxy search java
  308  ansible-galaxy search --author abessifi
  309  ansible-galaxy install abessifi.docker
  310  ll
  311  ls -al
  312  cd .ansible
  313  ll
  314  cd roles/
  315  ll
  316  cd'
  317*
  318  cd
  319  vim playbook.yml
  320  vim playbook.yml
  321  ansible-playbook playbook.yml
  322  ansible all -a "yum remove httpd* docker* -y"
  323  ansible all -a "yum remove tree* docker* -y"
  324  vim playbook.yml
  325  ansible-playbook playbook.yml
  326  cat playbook.yml
  327  history

===============================================================================================

DAY-06:

ANSIBLE STRATEGIES: it is mainly two types

1. linear: this will execute the first task on server-1, server-2 & second task again on server-1, server-2
2. free: it will not follow the order 


cat playbook1.yml
- hosts: dev
  strategy: linear
  tasks:
    - name: INSTALLING HTTPD
      shell: yum install httpd -y

    - name: INSTALLING MAVEN
      command: yum install maven -y


cat playbook2.yml
- hosts: dev
  strategy: free
  tasks:
    - name: INSTALLING TREE
      shell: yum install tree -y

    - name: INSTALLING docker
      command: yum install docker -y

=================================================================================================================

JINJA2-TEMPLATES: Used to produce the customized outputs.



=================================================================================================================

DEBUG MODULE: To print the message 

- hosts: dev
  tasks:
    - debug:
        msg: "hai all good morning"



vars inside the debug moudle:

- hosts: dev
  vars:
    name: raham
    loc: hyderabad
  tasks:
    - debug:
        msg: "hai all good morningi, i'm {{name}}, im residing on {{loc}}"

=================================================================================================================

LOOKUPS: Used to get data form files, databases, key/value stores, APIs, and other services.


cat playbook3.yml
- hosts: dev
  vars:
    dns: "{{lookup('file', '/root/dns.txt') }}"
  tasks:
    - debug:
        msg: "hai my dns values are {{dns}}"

cat dns.txt
dns-1: ec2-54-208-53-173.compute-1.amazonaws.com
dns-2: ec2-44-211-41-55.compute-1.amazonaws.com


cat playbook3.yml
- hosts: dev
  vars:
    ami: "{{lookup('file', '/root/ami.txt') }}"
  tasks:
    - debug:
        msg: "hai my ami values are {{ami}}"

cat ami.txt
dev-1: ami-06a0cd9728546d178
dev-2: ami-06a0cd9728546d178

=======================================================================================================================


DEPLOYMENT:

- hosts: test
  strategy: linear
  tasks:
    - name: installing httpd
      yum: name=httpd state=present

    - name: starting the web server
      service: name=httpd state=started

    - name: git checkout
      git:
        repo: "https://github.com/RAHAMSHAIK007/devopsbyrhama.git"
        dest: "/var/www/html/"

HISTORY:

 317  cd
  318  vim playbook.yml
  319  vim playbook.yml
  320  ansible-playbook playbook.yml
  321  ansible all -a "yum remove httpd* docker* -y"
  322  ansible all -a "yum remove tree* docker* -y"
  323  vim playbook.yml
  324  ansible-playbook playbook.yml
  325  cat playbook.yml
  326  history
  327  cat dns.txt
  328  vim ami.txt
  329  ll
  330  vim playbook3.yml
  331  ansible-playbook playbook.yml
  332  ansible-playbook playbook3.yml
  333  cat playbook3.yml
  334  cat ami.txt
  335  vim deployment.yml
  336  cat deployment.yml
  337  ansible-playbook deployment.yml
  338  vim deployment.yml
  339  ansible-playbook deployment.yml
  340  vim deployment.yml
  341  ansible-playbook deployment.yml
  342  cat dns.txt
  343  vim deployment.yml
  344  ansible-playbook deployment.yml
  345  cat deployment.yml
  346  ansible-playbook deployment.yml
  347  ansible -m setup dev[0]
  348  ansible -m setup test[0]
  349  ansible -m setup test[0] | grep {{ ansible_processor_cores }}
  350  ansible -m setup test[0] {{ ansible_processor_cores }}
  351  ansible -m setup -a "filter=ansible_processor_cores" dev[0]
  352  ansible -m setup -a "filter=ansible_processor_core" dev[0]
  353  ansible -m setup dev[0]
  354  ansible -m setup -a "filter=ansible_processor_cores" dev[0]
  355  ansible -m setup dev[0] | grep -i cpu
  356  ansible -m setup dev[0] | grep -i family
  357  ansible -m setup -a "filter=ansible_os_family" dev[0]
  358  ansible -m setup -a "filter=ansible_os_famil" dev[0]
  359  cat deployment.yml
  360  history
